import{Matrix3}from'./Matrix3.js';import{Vector3}from'./Vector3.js';function Plane(a,b){this.normal=a===void 0?new Vector3(1,0,0):a,this.constant=b===void 0?0:b}Object.assign(Plane.prototype,{set:function(a,b){return this.normal.copy(a),this.constant=b,this},setComponents:function(a,b,c,d){return this.normal.set(a,b,c),this.constant=d,this},setFromNormalAndCoplanarPoint:function(a,b){return this.normal.copy(a),this.constant=-b.dot(this.normal),this},setFromCoplanarPoints:function(){var d=new Vector3,e=new Vector3;return function(f,a,b){var c=d.subVectors(b,a).cross(e.subVectors(f,a)).normalize();return this.setFromNormalAndCoplanarPoint(c,f),this}}(),clone:function(){return new this.constructor().copy(this)},copy:function(a){return this.normal.copy(a.normal),this.constant=a.constant,this},normalize:function(){var a=1/this.normal.length();return this.normal.multiplyScalar(a),this.constant*=a,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,b){var c=this.distanceToPoint(a),d=b||new Vector3;return d.copy(this.normal).multiplyScalar(c)},intersectLine:function(){var a=new Vector3;return function(b,c){var d=c||new Vector3,e=b.delta(a),f=this.normal.dot(e);if(0===f)return 0===this.distanceToPoint(b.start)?d.copy(b.start):void 0;var g=-(b.start.dot(this.normal)+this.constant)/f;return 0>g||1<g?void 0:d.copy(e).multiplyScalar(g).add(b.start)}}(),intersectsLine:function(a){var b=this.distanceToPoint(a.start),c=this.distanceToPoint(a.end);return 0>b&&0<c||0>c&&0<b},intersectsBox:function(a){return a.intersectsPlane(this)},intersectsSphere:function(a){return a.intersectsPlane(this)},coplanarPoint:function(a){var b=a||new Vector3;return b.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new Vector3,b=new Matrix3;return function(c,d){var e=this.coplanarPoint(a).applyMatrix4(c),f=d||b.getNormalMatrix(c),g=this.normal.applyMatrix3(f).normalize();return this.constant=-e.dot(g),this}}(),translate:function(a){return this.constant-=a.dot(this.normal),this},equals:function(a){return a.normal.equals(this.normal)&&a.constant===this.constant}});export{Plane};