import{Vector3}from'./Vector3.js';import{Sphere}from'./Sphere.js';import{Plane}from'./Plane.js';function Frustum(a,b,c,d,e,f){this.planes=[a===void 0?new Plane:a,b===void 0?new Plane:b,c===void 0?new Plane:c,d===void 0?new Plane:d,e===void 0?new Plane:e,f===void 0?new Plane:f]}Object.assign(Frustum.prototype,{set:function(a,b,c,d,e,f){var g=this.planes;return g[0].copy(a),g[1].copy(b),g[2].copy(c),g[3].copy(d),g[4].copy(e),g[5].copy(f),this},clone:function(){return new this.constructor().copy(this)},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements,d=c[0],e=c[1],f=c[2],g=c[3],h=c[4],i=c[5],j=c[6],k=c[7],l=c[8],m=c[9],n=c[10],o=c[11],p=c[12],q=c[13],r=c[14],s=c[15];return b[0].setComponents(g-d,k-h,o-l,s-p).normalize(),b[1].setComponents(g+d,k+h,o+l,s+p).normalize(),b[2].setComponents(g+e,k+i,o+m,s+q).normalize(),b[3].setComponents(g-e,k-i,o-m,s-q).normalize(),b[4].setComponents(g-f,k-j,o-n,s-r).normalize(),b[5].setComponents(g+f,k+j,o+n,s+r).normalize(),this},intersectsObject:function(){var a=new Sphere;return function(b){var c=b.geometry;return null===c.boundingSphere&&c.computeBoundingSphere(),a.copy(c.boundingSphere).applyMatrix4(b.matrixWorld),this.intersectsSphere(a)}}(),intersectsSprite:function(){var a=new Sphere;return function(b){return a.center.set(0,0,0),a.radius=0.7071067811865476,a.applyMatrix4(b.matrixWorld),this.intersectsSphere(a)}}(),intersectsSphere:function(a){for(var b,c=this.planes,d=a.center,e=-a.radius,f=0;6>f;f++)if(b=c[f].distanceToPoint(d),b<e)return!1;return!0},intersectsBox:function(){var a=new Vector3,b=new Vector3;return function(c){for(var d,e=this.planes,f=0;6>f;f++){d=e[f],a.x=0<d.normal.x?c.min.x:c.max.x,b.x=0<d.normal.x?c.max.x:c.min.x,a.y=0<d.normal.y?c.min.y:c.max.y,b.y=0<d.normal.y?c.max.y:c.min.y,a.z=0<d.normal.z?c.min.z:c.max.z,b.z=0<d.normal.z?c.max.z:c.min.z;var g=d.distanceToPoint(a),h=d.distanceToPoint(b);if(0>g&&0>h)return!1}return!0}}(),containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0}});export{Frustum};