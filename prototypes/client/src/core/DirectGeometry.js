import{Vector2}from'../math/Vector2.js';function DirectGeometry(){this.indices=[],this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}Object.assign(DirectGeometry.prototype,{computeGroups:function(a){for(var b,c,d=[],e=void 0,f=a.faces,g=0;g<f.length;g++)c=f[g],c.materialIndex!==e&&(e=c.materialIndex,void 0!=b&&(b.count=3*g-b.start,d.push(b)),b={start:3*g,materialIndex:e});b!==void 0&&(b.count=3*g-b.start,d.push(b)),this.groups=d},fromGeometry:function(a){var b,c=a.faces,d=a.vertices,e=a.faceVertexUvs,f=e[0]&&0<e[0].length,g=e[1]&&0<e[1].length,h=a.morphTargets,k=h.length;if(0<k){b=[];for(var l=0;l<k;l++)b[l]=[];this.morphTargets.position=b}var i,m=a.morphNormals,n=m.length;if(0<n){i=[];for(var l=0;l<n;l++)i[l]=[];this.morphTargets.normal=i}for(var o,p=a.skinIndices,q=a.skinWeights,r=p.length===d.length,s=q.length===d.length,l=0;l<c.length;l++){o=c[l],this.vertices.push(d[o.a],d[o.b],d[o.c]);var t=o.vertexNormals;if(3===t.length)this.normals.push(t[0],t[1],t[2]);else{var u=o.normal;this.normals.push(u,u,u)}var v=o.vertexColors;if(3===v.length)this.colors.push(v[0],v[1],v[2]);else{var w=o.color;this.colors.push(w,w,w)}if(!0===f){var x=e[0][l];void 0===x?(console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ',l),this.uvs.push(new Vector2,new Vector2,new Vector2)):this.uvs.push(x[0],x[1],x[2])}if(!0===g){var x=e[1][l];void 0===x?(console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ',l),this.uvs2.push(new Vector2,new Vector2,new Vector2)):this.uvs2.push(x[0],x[1],x[2])}for(var y,z=0;z<k;z++)y=h[z].vertices,b[z].push(y[o.a],y[o.b],y[o.c]);for(var j,z=0;z<n;z++)j=m[z].vertexNormals[l],i[z].push(j.a,j.b,j.c);r&&this.skinIndices.push(p[o.a],p[o.b],p[o.c]),s&&this.skinWeights.push(q[o.a],q[o.b],q[o.c])}return this.computeGroups(a),this.verticesNeedUpdate=a.verticesNeedUpdate,this.normalsNeedUpdate=a.normalsNeedUpdate,this.colorsNeedUpdate=a.colorsNeedUpdate,this.uvsNeedUpdate=a.uvsNeedUpdate,this.groupsNeedUpdate=a.groupsNeedUpdate,this}});export{DirectGeometry};