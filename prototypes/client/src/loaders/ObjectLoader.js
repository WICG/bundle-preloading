import{UVMapping,CubeReflectionMapping,CubeRefractionMapping,EquirectangularReflectionMapping,EquirectangularRefractionMapping,SphericalReflectionMapping,CubeUVReflectionMapping,CubeUVRefractionMapping,RepeatWrapping,ClampToEdgeWrapping,MirroredRepeatWrapping,NearestFilter,NearestMipMapNearestFilter,NearestMipMapLinearFilter,LinearFilter,LinearMipMapNearestFilter,LinearMipMapLinearFilter}from'../constants.js';import{Color}from'../math/Color.js';import{Matrix4}from'../math/Matrix4.js';import{Object3D}from'../core/Object3D.js';import{Group}from'../objects/Group.js';import{Sprite}from'../objects/Sprite.js';import{Points}from'../objects/Points.js';import{Line}from'../objects/Line.js';import{LineLoop}from'../objects/LineLoop.js';import{LineSegments}from'../objects/LineSegments.js';import{LOD}from'../objects/LOD.js';import{Mesh}from'../objects/Mesh.js';import{SkinnedMesh}from'../objects/SkinnedMesh.js';import{Fog}from'../scenes/Fog.js';import{FogExp2}from'../scenes/FogExp2.js';import{HemisphereLight}from'../lights/HemisphereLight.js';import{SpotLight}from'../lights/SpotLight.js';import{PointLight}from'../lights/PointLight.js';import{DirectionalLight}from'../lights/DirectionalLight.js';import{AmbientLight}from'../lights/AmbientLight.js';import{RectAreaLight}from'../lights/RectAreaLight.js';import{OrthographicCamera}from'../cameras/OrthographicCamera.js';import{PerspectiveCamera}from'../cameras/PerspectiveCamera.js';import{Scene}from'../scenes/Scene.js';import{Texture}from'../textures/Texture.js';import{ImageLoader}from'./ImageLoader.js';import{LoadingManager,DefaultLoadingManager}from'./LoadingManager.js';import{AnimationClip}from'../animation/AnimationClip.js';import{MaterialLoader}from'./MaterialLoader.js';import{BufferGeometryLoader}from'./BufferGeometryLoader.js';import{JSONLoader}from'./JSONLoader.js';import{FileLoader}from'./FileLoader.js';import*as Geometries from'../geometries/Geometries.js';function ObjectLoader(a){this.manager=a===void 0?DefaultLoadingManager:a,this.texturePath=''}Object.assign(ObjectLoader.prototype,{load:function(a,b,c,d){''===this.texturePath&&(this.texturePath=a.substring(0,a.lastIndexOf('/')+1));var e=this,f=new FileLoader(e.manager);f.load(a,function(c){var f=null;try{f=JSON.parse(c)}catch(b){return void 0!==d&&d(b),void console.error('THREE:ObjectLoader: Can\'t parse '+a+'.',b.message)}var g=f.metadata;return void 0===g||void 0===g.type||'geometry'===g.type.toLowerCase()?void console.error('THREE.ObjectLoader: Can\'t load '+a+'. Use THREE.JSONLoader instead.'):void e.parse(f,b)},c,d)},setTexturePath:function(a){this.texturePath=a},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a,b){var c=this.parseGeometries(a.geometries),d=this.parseImages(a.images,function(){void 0!==b&&b(g)}),e=this.parseTextures(a.textures,d),f=this.parseMaterials(a.materials,e),g=this.parseObject(a.object,c,f);return a.animations&&(g.animations=this.parseAnimations(a.animations)),(void 0===a.images||0===a.images.length)&&void 0!==b&&b(g),g},parseGeometries:function(a){var b={};if(a!==void 0)for(var c=new JSONLoader,d=new BufferGeometryLoader,e=0,f=a.length;e<f;e++){var g,h=a[e];switch(h.type){case'PlaneGeometry':case'PlaneBufferGeometry':g=new Geometries[h.type](h.width,h.height,h.widthSegments,h.heightSegments);break;case'BoxGeometry':case'BoxBufferGeometry':case'CubeGeometry':g=new Geometries[h.type](h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case'CircleGeometry':case'CircleBufferGeometry':g=new Geometries[h.type](h.radius,h.segments,h.thetaStart,h.thetaLength);break;case'CylinderGeometry':case'CylinderBufferGeometry':g=new Geometries[h.type](h.radiusTop,h.radiusBottom,h.height,h.radialSegments,h.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);break;case'ConeGeometry':case'ConeBufferGeometry':g=new Geometries[h.type](h.radius,h.height,h.radialSegments,h.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);break;case'SphereGeometry':case'SphereBufferGeometry':g=new Geometries[h.type](h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case'DodecahedronGeometry':case'IcosahedronGeometry':case'OctahedronGeometry':case'TetrahedronGeometry':g=new Geometries[h.type](h.radius,h.detail);break;case'RingGeometry':case'RingBufferGeometry':g=new Geometries[h.type](h.innerRadius,h.outerRadius,h.thetaSegments,h.phiSegments,h.thetaStart,h.thetaLength);break;case'TorusGeometry':case'TorusBufferGeometry':g=new Geometries[h.type](h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case'TorusKnotGeometry':case'TorusKnotBufferGeometry':g=new Geometries[h.type](h.radius,h.tube,h.tubularSegments,h.radialSegments,h.p,h.q);break;case'LatheGeometry':case'LatheBufferGeometry':g=new Geometries[h.type](h.points,h.segments,h.phiStart,h.phiLength);break;case'BufferGeometry':g=d.parse(h);break;case'Geometry':g=c.parse(h,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+h.type+'"');continue;}g.uuid=h.uuid,void 0!==h.name&&(g.name=h.name),b[h.uuid]=g}return b},parseMaterials:function(a,b){var c={};if(a!==void 0){var d=new MaterialLoader;d.setTextures(b);for(var e,f=0,g=a.length;f<g;f++)if(e=a[f],'MultiMaterial'===e.type){for(var h=[],i=0;i<e.materials.length;i++)h.push(d.parse(e.materials[i]));c[e.uuid]=h}else c[e.uuid]=d.parse(e)}return c},parseAnimations:function(a){for(var b,c=[],d=0;d<a.length;d++)b=AnimationClip.parse(a[d]),c.push(b);return c},parseImages:function(a,b){function c(a){return d.manager.itemStart(a),g.load(a,function(){d.manager.itemEnd(a)},void 0,function(){d.manager.itemEnd(a),d.manager.itemError(a)})}var d=this,e={};if(a!==void 0&&0<a.length){var f=new LoadingManager(b),g=new ImageLoader(f);g.setCrossOrigin(this.crossOrigin);for(var h=0,i=a.length;h<i;h++){var j=a[h],k=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(j.url)?j.url:d.texturePath+j.url;e[j.uuid]=c(k)}}return e},parseTextures:function(a,b){function c(a,b){return'number'==typeof a?a:(console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.',a),b[a])}var d={};if(a!==void 0)for(var e,f=0,g=a.length;f<g;f++){e=a[f],void 0===e.image&&console.warn('THREE.ObjectLoader: No "image" specified for',e.uuid),void 0===b[e.image]&&console.warn('THREE.ObjectLoader: Undefined image',e.image);var h=new Texture(b[e.image]);h.needsUpdate=!0,h.uuid=e.uuid,void 0!==e.name&&(h.name=e.name),void 0!==e.mapping&&(h.mapping=c(e.mapping,TEXTURE_MAPPING)),void 0!==e.offset&&h.offset.fromArray(e.offset),void 0!==e.repeat&&h.repeat.fromArray(e.repeat),void 0!==e.wrap&&(h.wrapS=c(e.wrap[0],TEXTURE_WRAPPING),h.wrapT=c(e.wrap[1],TEXTURE_WRAPPING)),void 0!==e.minFilter&&(h.minFilter=c(e.minFilter,TEXTURE_FILTER)),void 0!==e.magFilter&&(h.magFilter=c(e.magFilter,TEXTURE_FILTER)),void 0!==e.anisotropy&&(h.anisotropy=e.anisotropy),void 0!==e.flipY&&(h.flipY=e.flipY),d[e.uuid]=h}return d},parseObject:function(){var a=new Matrix4;return function(b,c,d){function e(a){return void 0===c[a]&&console.warn('THREE.ObjectLoader: Undefined geometry',a),c[a]}function f(a){if(void 0!==a){if(Array.isArray(a)){for(var b,c=[],e=0,f=a.length;e<f;e++)b=a[e],void 0===d[b]&&console.warn('THREE.ObjectLoader: Undefined material',b),c.push(d[b]);return c}return void 0===d[a]&&console.warn('THREE.ObjectLoader: Undefined material',a),d[a]}}var g;switch(b.type){case'Scene':g=new Scene,void 0!==b.background&&Number.isInteger(b.background)&&(g.background=new Color(b.background)),void 0!==b.fog&&('Fog'===b.fog.type?g.fog=new Fog(b.fog.color,b.fog.near,b.fog.far):'FogExp2'===b.fog.type&&(g.fog=new FogExp2(b.fog.color,b.fog.density)));break;case'PerspectiveCamera':g=new PerspectiveCamera(b.fov,b.aspect,b.near,b.far),void 0!==b.focus&&(g.focus=b.focus),void 0!==b.zoom&&(g.zoom=b.zoom),void 0!==b.filmGauge&&(g.filmGauge=b.filmGauge),void 0!==b.filmOffset&&(g.filmOffset=b.filmOffset),void 0!==b.view&&(g.view=Object.assign({},b.view));break;case'OrthographicCamera':g=new OrthographicCamera(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case'AmbientLight':g=new AmbientLight(b.color,b.intensity);break;case'DirectionalLight':g=new DirectionalLight(b.color,b.intensity);break;case'PointLight':g=new PointLight(b.color,b.intensity,b.distance,b.decay);break;case'RectAreaLight':g=new RectAreaLight(b.color,b.intensity,b.width,b.height);break;case'SpotLight':g=new SpotLight(b.color,b.intensity,b.distance,b.angle,b.penumbra,b.decay);break;case'HemisphereLight':g=new HemisphereLight(b.color,b.groundColor,b.intensity);break;case'SkinnedMesh':console.warn('THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.');case'Mesh':var h=e(b.geometry),i=f(b.material);g=h.bones&&0<h.bones.length?new SkinnedMesh(h,i):new Mesh(h,i);break;case'LOD':g=new LOD;break;case'Line':g=new Line(e(b.geometry),f(b.material),b.mode);break;case'LineLoop':g=new LineLoop(e(b.geometry),f(b.material));break;case'LineSegments':g=new LineSegments(e(b.geometry),f(b.material));break;case'PointCloud':case'Points':g=new Points(e(b.geometry),f(b.material));break;case'Sprite':g=new Sprite(f(b.material));break;case'Group':g=new Group;break;default:g=new Object3D;}if(g.uuid=b.uuid,void 0!==b.name&&(g.name=b.name),void 0===b.matrix?(void 0!==b.position&&g.position.fromArray(b.position),void 0!==b.rotation&&g.rotation.fromArray(b.rotation),void 0!==b.quaternion&&g.quaternion.fromArray(b.quaternion),void 0!==b.scale&&g.scale.fromArray(b.scale)):(a.fromArray(b.matrix),a.decompose(g.position,g.quaternion,g.scale)),void 0!==b.castShadow&&(g.castShadow=b.castShadow),void 0!==b.receiveShadow&&(g.receiveShadow=b.receiveShadow),b.shadow&&(void 0!==b.shadow.bias&&(g.shadow.bias=b.shadow.bias),void 0!==b.shadow.radius&&(g.shadow.radius=b.shadow.radius),void 0!==b.shadow.mapSize&&g.shadow.mapSize.fromArray(b.shadow.mapSize),void 0!==b.shadow.camera&&(g.shadow.camera=this.parseObject(b.shadow.camera))),void 0!==b.visible&&(g.visible=b.visible),void 0!==b.userData&&(g.userData=b.userData),void 0!==b.children)for(var j in b.children)g.add(this.parseObject(b.children[j],c,d));if('LOD'===b.type)for(var k=b.levels,m=0;m<k.length;m++){var l=k[m],j=g.getObjectByProperty('uuid',l.object);void 0!==j&&g.addLevel(j,l.distance)}return g}}()});var TEXTURE_MAPPING={UVMapping:UVMapping,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,SphericalReflectionMapping:SphericalReflectionMapping,CubeUVReflectionMapping:CubeUVReflectionMapping,CubeUVRefractionMapping:CubeUVRefractionMapping},TEXTURE_WRAPPING={RepeatWrapping:RepeatWrapping,ClampToEdgeWrapping:ClampToEdgeWrapping,MirroredRepeatWrapping:MirroredRepeatWrapping},TEXTURE_FILTER={NearestFilter:NearestFilter,NearestMipMapNearestFilter:NearestMipMapNearestFilter,NearestMipMapLinearFilter:NearestMipMapLinearFilter,LinearFilter:LinearFilter,LinearMipMapNearestFilter:LinearMipMapNearestFilter,LinearMipMapLinearFilter:LinearMipMapLinearFilter};export{ObjectLoader};