import{Curve}from'./Curve.js';import{Vector3}from'../../math/Vector3.js';import{Geometry}from'../../core/Geometry.js';import{LineCurve}from'../curves/LineCurve.js';function CurvePath(){Curve.call(this),this.curves=[],this.autoClose=!1}CurvePath.prototype=Object.assign(Object.create(Curve.prototype),{constructor:CurvePath,add:function(a){this.curves.push(a)},closePath:function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new LineCurve(b,a))},getPoint:function(a){for(var b=a*this.getLength(),c=this.getCurveLengths(),d=0;d<c.length;){if(c[d]>=b){var e=c[d]-b,f=this.curves[d],g=f.getLength(),h=0===g?0:1-e/g;return f.getPointAt(h)}d++}return null},getLength:function(){var a=this.getCurveLengths();return a[a.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var a=[],b=0,c=0,d=this.curves.length;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a,a},getSpacedPoints:function(a){void 0===a&&(a=40);for(var b=[],c=0;c<=a;c++)b.push(this.getPoint(c/a));return this.autoClose&&b.push(b[0]),b},getPoints:function(a){a=a||12;for(var b,c=[],d=0,e=this.curves;d<e.length;d++)for(var f,g=e[d],h=g&&g.isEllipseCurve?2*a:g&&g.isLineCurve?1:g&&g.isSplineCurve?a*g.points.length:a,i=g.getPoints(h),k=0;k<i.length;k++)f=i[k],b&&b.equals(f)||(c.push(f),b=f);return this.autoClose&&1<c.length&&!c[c.length-1].equals(c[0])&&c.push(c[0]),c},createPointsGeometry:function(a){var b=this.getPoints(a);return this.createGeometry(b)},createSpacedPointsGeometry:function(a){var b=this.getSpacedPoints(a);return this.createGeometry(b)},createGeometry:function(a){for(var b,c=new Geometry,d=0,e=a.length;d<e;d++)b=a[d],c.vertices.push(new Vector3(b.x,b.y,b.z||0));return c}});export{CurvePath};