import{Quaternion}from'../math/Quaternion.js';function PropertyMixer(a,b,c){this.binding=a,this.valueSize=c;var d,e=Float64Array;'quaternion'===b?d=this._slerp:'string'===b||'bool'===b?(e=Array,d=this._select):d=this._lerp;this.buffer=new e(4*c),this._mixBufferRegion=d,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Object.assign(PropertyMixer.prototype,{accumulate:function(a,b){var c=this.buffer,d=this.valueSize,e=a*d+d,f=this.cumulativeWeight;if(0===f){for(var g=0;g!==d;++g)c[e+g]=c[g];f=b}else{f+=b;var h=b/f;this._mixBufferRegion(c,e,0,h,d)}this.cumulativeWeight=f},apply:function(a){var b=this.valueSize,c=this.buffer,d=a*b+b,e=this.cumulativeWeight,f=this.binding;if(this.cumulativeWeight=0,1>e){this._mixBufferRegion(c,d,3*b,1-e,b)}for(var g=b;g!==b+b;++g)if(c[g]!==c[g+b]){f.setValue(c,d);break}},saveOriginalState:function(){var a=this.binding,b=this.buffer,c=this.valueSize,d=3*c;a.getValue(b,d);for(var e=c;e!==d;++e)b[e]=b[d+e%c];this.cumulativeWeight=0},restoreOriginalState:function(){var a=3*this.valueSize;this.binding.setValue(this.buffer,a)},_select:function(a,b,c,d,e){if(0.5<=d)for(var f=0;f!==e;++f)a[b+f]=a[c+f]},_slerp:function(a,b,c,d){Quaternion.slerpFlat(a,b,a,b,a,c,d)},_lerp:function(a,b,c,d,e){for(var f,g=0;g!==e;++g)f=b+g,a[f]=a[f]*(1-d)+a[c+g]*d}});export{PropertyMixer};