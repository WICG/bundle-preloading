import{Vector3}from'../math/Vector3.js';import{Vector2}from'../math/Vector2.js';import{Sphere}from'../math/Sphere.js';import{Ray}from'../math/Ray.js';import{Matrix4}from'../math/Matrix4.js';import{Object3D}from'../core/Object3D.js';import{Triangle}from'../math/Triangle.js';import{Face3}from'../core/Face3.js';import{DoubleSide,BackSide,TrianglesDrawMode}from'../constants.js';import{MeshBasicMaterial}from'../materials/MeshBasicMaterial.js';import{BufferGeometry}from'../core/BufferGeometry.js';function Mesh(a,b){Object3D.call(this),this.type='Mesh',this.geometry=a===void 0?new BufferGeometry:a,this.material=b===void 0?new MeshBasicMaterial({color:16777215*Math.random()}):b,this.drawMode=TrianglesDrawMode,this.updateMorphTargets()}Mesh.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Mesh,isMesh:!0,setDrawMode:function(a){this.drawMode=a},copy:function(a){return Object3D.prototype.copy.call(this,a),this.drawMode=a.drawMode,this},updateMorphTargets:function(){var a=this.geometry.morphTargets;if(a!==void 0&&0<a.length){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(var b=0,c=a.length;b<c;b++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[a[b].name]=b}},raycast:function(){function d(a,b,c,d,e,f,g){return Triangle.barycoordFromPoint(a,b,c,d,p),e.multiplyScalar(p.x),f.multiplyScalar(p.y),g.multiplyScalar(p.z),e.add(f).add(g),e.clone()}function e(a,b,c,d,e,f,g){var h,i=a.material;if(h=i.side===BackSide?c.intersectTriangle(f,e,d,!0,g):c.intersectTriangle(d,e,f,i.side!==DoubleSide,g),null===h)return null;r.copy(g),r.applyMatrix4(a.matrixWorld);var j=b.ray.origin.distanceTo(r);return j<b.near||j>b.far?null:{distance:j,point:r.clone(),object:a}}function f(f,g,h,j,p,r,a,b){i.fromBufferAttribute(j,r),k.fromBufferAttribute(j,a),l.fromBufferAttribute(j,b);var c=e(f,g,h,i,k,l,q);return c&&(p&&(m.fromBufferAttribute(p,r),n.fromBufferAttribute(p,a),o.fromBufferAttribute(p,b),c.uv=d(q,i,k,l,m,n,o)),c.face=new Face3(r,a,b,Triangle.normal(i,k,l)),c.faceIndex=r),c}var g=new Matrix4,h=new Ray,j=new Sphere,i=new Vector3,k=new Vector3,l=new Vector3,a=new Vector3,b=new Vector3,c=new Vector3,m=new Vector2,n=new Vector2,o=new Vector2,p=new Vector3,q=new Vector3,r=new Vector3;return function(p,r){var s=this.geometry,u=this.material,v=this.matrixWorld;if(void 0!==u&&(null===s.boundingSphere&&s.computeBoundingSphere(),j.copy(s.boundingSphere),j.applyMatrix4(v),!1!==p.ray.intersectsSphere(j))&&(g.getInverse(v),h.copy(p.ray).applyMatrix4(g),null===s.boundingBox||!1!==h.intersectsBox(s.boundingBox))){var w;if(s.isBufferGeometry){var x,y,z,A,B,C=s.index,D=s.attributes.position,E=s.attributes.uv;if(null!==C)for(A=0,B=C.count;A<B;A+=3)x=C.getX(A),y=C.getX(A+1),z=C.getX(A+2),w=f(this,p,h,D,E,x,y,z),w&&(w.faceIndex=Math.floor(A/3),r.push(w));else for(A=0,B=D.count;A<B;A+=3)x=A,y=A+1,z=A+2,w=f(this,p,h,D,E,x,y,z),w&&(w.index=x,r.push(w))}else if(s.isGeometry){var F,G,H,I,J=Array.isArray(u),K=s.vertices,L=s.faces,M=s.faceVertexUvs[0];0<M.length&&(I=M);for(var N=0,O=L.length;N<O;N++){var P=L[N],Q=J?u[P.materialIndex]:u;if(void 0!==Q){if(F=K[P.a],G=K[P.b],H=K[P.c],!0===Q.morphTargets){var R=s.morphTargets,S=this.morphTargetInfluences;i.set(0,0,0),k.set(0,0,0),l.set(0,0,0);for(var T,U=0,t=R.length;U<t;U++)if(T=S[U],0!==T){var V=R[U].vertices;i.addScaledVector(a.subVectors(V[P.a],F),T),k.addScaledVector(b.subVectors(V[P.b],G),T),l.addScaledVector(c.subVectors(V[P.c],H),T)}i.add(F),k.add(G),l.add(H),F=i,G=k,H=l}if(w=e(this,p,h,F,G,H,q),w){if(I&&I[N]){var W=I[N];m.copy(W[0]),n.copy(W[1]),o.copy(W[2]),w.uv=d(q,F,G,H,m,n,o)}w.face=P,w.faceIndex=N,r.push(w)}}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});export{Mesh};