import{BackSide,DoubleSide,FlatShading,CubeUVRefractionMapping,CubeUVReflectionMapping,GammaEncoding,LinearEncoding}from'../../constants.js';import{WebGLProgram}from'./WebGLProgram.js';function WebGLPrograms(a,b){function c(a){var c=a.skeleton,d=c.bones;if(b.floatVertexTextures)return 1024;var e=b.maxVertexUniforms,f=Math.floor((e-20)/4),g=Math.min(f,d.length);return g<d.length?(console.warn('THREE.WebGLRenderer: Skeleton has '+d.length+' bones. This GPU supports '+g+'.'),0):g}function d(a,b){var c;return a?a.isTexture?c=a.encoding:a.isWebGLRenderTarget&&(console.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\'t use render targets as textures. Use their .texture property instead.'),c=a.texture.encoding):c=LinearEncoding,c===LinearEncoding&&b&&(c=GammaEncoding),c}var e=[],f={MeshDepthMaterial:'depth',MeshNormalMaterial:'normal',MeshBasicMaterial:'basic',MeshLambertMaterial:'lambert',MeshPhongMaterial:'phong',MeshToonMaterial:'phong',MeshStandardMaterial:'physical',MeshPhysicalMaterial:'physical',LineBasicMaterial:'basic',LineDashedMaterial:'dashed',PointsMaterial:'points'},g=['precision','supportsVertexTextures','map','mapEncoding','envMap','envMapMode','envMapEncoding','lightMap','aoMap','emissiveMap','emissiveMapEncoding','bumpMap','normalMap','displacementMap','specularMap','roughnessMap','metalnessMap','gradientMap','alphaMap','combine','vertexColors','fog','useFog','fogExp','flatShading','sizeAttenuation','logarithmicDepthBuffer','skinning','maxBones','useVertexTexture','morphTargets','morphNormals','maxMorphTargets','maxMorphNormals','premultipliedAlpha','numDirLights','numPointLights','numSpotLights','numHemiLights','numRectAreaLights','shadowMapEnabled','shadowMapType','toneMapping','physicallyCorrectLights','alphaTest','doubleSided','flipSided','numClippingPlanes','numClipIntersection','depthPacking','dithering'];this.getParameters=function(e,g,h,i,j,k){var l=f[e.type],m=k.isSkinnedMesh?c(k):0,n=a.getPrecision();null!==e.precision&&(n=b.getMaxPrecision(e.precision),n!==e.precision&&console.warn('THREE.WebGLProgram.getParameters:',e.precision,'not supported, using',n,'instead.'));var o=a.getRenderTarget(),p={shaderID:l,precision:n,supportsVertexTextures:b.vertexTextures,outputEncoding:d(o?o.texture:null,a.gammaOutput),map:!!e.map,mapEncoding:d(e.map,a.gammaInput),envMap:!!e.envMap,envMapMode:e.envMap&&e.envMap.mapping,envMapEncoding:d(e.envMap,a.gammaInput),envMapCubeUV:!!e.envMap&&(e.envMap.mapping===CubeUVReflectionMapping||e.envMap.mapping===CubeUVRefractionMapping),lightMap:!!e.lightMap,aoMap:!!e.aoMap,emissiveMap:!!e.emissiveMap,emissiveMapEncoding:d(e.emissiveMap,a.gammaInput),bumpMap:!!e.bumpMap,normalMap:!!e.normalMap,displacementMap:!!e.displacementMap,roughnessMap:!!e.roughnessMap,metalnessMap:!!e.metalnessMap,specularMap:!!e.specularMap,alphaMap:!!e.alphaMap,gradientMap:!!e.gradientMap,combine:e.combine,vertexColors:e.vertexColors,fog:!!h,useFog:e.fog,fogExp:h&&h.isFogExp2,flatShading:e.shading===FlatShading,sizeAttenuation:e.sizeAttenuation,logarithmicDepthBuffer:b.logarithmicDepthBuffer,skinning:e.skinning&&0<m,maxBones:m,useVertexTexture:b.floatVertexTextures,morphTargets:e.morphTargets,morphNormals:e.morphNormals,maxMorphTargets:a.maxMorphTargets,maxMorphNormals:a.maxMorphNormals,numDirLights:g.directional.length,numPointLights:g.point.length,numSpotLights:g.spot.length,numRectAreaLights:g.rectArea.length,numHemiLights:g.hemi.length,numClippingPlanes:i,numClipIntersection:j,dithering:e.dithering,shadowMapEnabled:a.shadowMap.enabled&&k.receiveShadow&&0<g.shadows.length,shadowMapType:a.shadowMap.type,toneMapping:a.toneMapping,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:e.premultipliedAlpha,alphaTest:e.alphaTest,doubleSided:e.side===DoubleSide,flipSided:e.side===BackSide,depthPacking:e.depthPacking!==void 0&&e.depthPacking};return p},this.getProgramCode=function(a,b){var c=[];if(b.shaderID?c.push(b.shaderID):(c.push(a.fragmentShader),c.push(a.vertexShader)),void 0!==a.defines)for(var d in a.defines)c.push(d),c.push(a.defines[d]);for(var e=0;e<g.length;e++)c.push(b[g[e]]);return c.join()},this.acquireProgram=function(b,c,d){for(var f,g,h=0,i=e.length;h<i;h++)if(g=e[h],g.code===d){f=g,++f.usedTimes;break}return void 0===f&&(f=new WebGLProgram(a,d,b,c),e.push(f)),f},this.releaseProgram=function(a){if(0==--a.usedTimes){var b=e.indexOf(a);e[b]=e[e.length-1],e.pop(),a.destroy()}},this.programs=e}export{WebGLPrograms};