import{_Math}from'../../math/Math.js';import{Vector3}from'../../math/Vector3.js';import{Matrix4}from'../../math/Matrix4.js';function Curve(){this.arcLengthDivisions=200}Object.assign(Curve.prototype,{getPoint:function(){return console.warn('THREE.Curve: .getPoint() not implemented.'),null},getPointAt:function(a){var b=this.getUtoTmapping(a);return this.getPoint(b)},getPoints:function(a){a===void 0&&(a=5);for(var b=[],c=0;c<=a;c++)b.push(this.getPoint(c/a));return b},getSpacedPoints:function(a){a===void 0&&(a=5);for(var b=[],c=0;c<=a;c++)b.push(this.getPointAt(c/a));return b},getLength:function(){var a=this.getLengths();return a[a.length-1]},getLengths:function(a){if(void 0===a&&(a=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b,c,d=[],e=this.getPoint(0),f=0;for(d.push(0),c=1;c<=a;c++)b=this.getPoint(c/a),f+=b.distanceTo(e),d.push(f),e=b;return this.cacheArcLengths=d,d},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(a,b){var c,d=this.getLengths(),e=0,f=d.length;c=b?b:a*d[f-1];for(var g,h=0,i=f-1;h<=i;)if(e=Math.floor(h+(i-h)/2),g=d[e]-c,0>g)h=e+1;else if(0<g)i=e-1;else{i=e;break}if(e=i,d[e]===c)return e/(f-1);var j=d[e],k=d[e+1],l=(c-j)/(k-j),m=(e+l)/(f-1);return m},getTangent:function(a){var b=1e-4,c=a-b,d=a+b;0>c&&(c=0),1<d&&(d=1);var e=this.getPoint(c),f=this.getPoint(d),g=f.clone().sub(e);return g.normalize()},getTangentAt:function(a){var b=this.getUtoTmapping(a);return this.getTangent(b)},computeFrenetFrames:function(a,b){var c,d,e,f=Math.acos,g=Math.abs,h=new Vector3,i=[],j=[],k=[],l=new Vector3,m=new Matrix4;for(c=0;c<=a;c++)d=c/a,i[c]=this.getTangentAt(d),i[c].normalize();j[0]=new Vector3,k[0]=new Vector3;var n=Number.MAX_VALUE,o=g(i[0].x),p=g(i[0].y),q=g(i[0].z);for(o<=n&&(n=o,h.set(1,0,0)),p<=n&&(n=p,h.set(0,1,0)),q<=n&&h.set(0,0,1),l.crossVectors(i[0],h).normalize(),j[0].crossVectors(i[0],l),k[0].crossVectors(i[0],j[0]),c=1;c<=a;c++)j[c]=j[c-1].clone(),k[c]=k[c-1].clone(),l.crossVectors(i[c-1],i[c]),l.length()>Number.EPSILON&&(l.normalize(),e=f(_Math.clamp(i[c-1].dot(i[c]),-1,1)),j[c].applyMatrix4(m.makeRotationAxis(l,e))),k[c].crossVectors(i[c],j[c]);if(!0===b)for(e=f(_Math.clamp(j[0].dot(j[a]),-1,1)),e/=a,0<i[0].dot(l.crossVectors(j[0],j[a]))&&(e=-e),c=1;c<=a;c++)j[c].applyMatrix4(m.makeRotationAxis(i[c],e*c)),k[c].crossVectors(i[c],j[c]);return{tangents:i,normals:j,binormals:k}}});export{Curve};