import{Ray}from'../math/Ray.js';function Raycaster(a,b,c,d){this.ray=new Ray(a,b),this.near=c||0,this.far=d||Infinity,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.'),this.Points}}})}function ascSort(c,a){return c.distance-a.distance}function intersectObject(a,b,c,d){if(!1!==a.visible&&(a.raycast(b,c),!0===d))for(var e=a.children,f=0,g=e.length;f<g;f++)intersectObject(e[f],b,c,!0)}Object.assign(Raycaster.prototype,{linePrecision:1,set:function(a,b){this.ray.set(a,b)},setFromCamera:function(a,b){b&&b.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(b.matrixWorld),this.ray.direction.set(a.x,a.y,0.5).unproject(b).sub(this.ray.origin).normalize()):b&&b.isOrthographicCamera?(this.ray.origin.set(a.x,a.y,(b.near+b.far)/(b.near-b.far)).unproject(b),this.ray.direction.set(0,0,-1).transformDirection(b.matrixWorld)):console.error('THREE.Raycaster: Unsupported camera type.')},intersectObject:function(a,b){var c=[];return intersectObject(a,this,c,b),c.sort(ascSort),c},intersectObjects:function(a,b){var c=[];if(!1===Array.isArray(a))return console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.'),c;for(var d=0,e=a.length;d<e;d++)intersectObject(a[d],this,c,b);return c.sort(ascSort),c}});export{Raycaster};