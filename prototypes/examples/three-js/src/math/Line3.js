import{Vector3}from'./Vector3.js';import{_Math}from'./Math.js';function Line3(a,b){this.start=a===void 0?new Vector3:a,this.end=b===void 0?new Vector3:b}Object.assign(Line3.prototype,{set:function(a,b){return this.start.copy(a),this.end.copy(b),this},clone:function(){return new this.constructor().copy(this)},copy:function(a){return this.start.copy(a.start),this.end.copy(a.end),this},getCenter:function(a){var b=a||new Vector3;return b.addVectors(this.start,this.end).multiplyScalar(0.5)},delta:function(a){var b=a||new Vector3;return b.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(a,b){var c=b||new Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new Vector3,b=new Vector3;return function(c,d){a.subVectors(c,this.start),b.subVectors(this.end,this.start);var e=b.dot(b),f=b.dot(a),g=f/e;return d&&(g=_Math.clamp(g,0,1)),g}}(),closestPointToPoint:function(a,b,c){var d=this.closestPointToPointParameter(a,b),e=c||new Vector3;return this.delta(e).multiplyScalar(d).add(this.start)},applyMatrix4:function(a){return this.start.applyMatrix4(a),this.end.applyMatrix4(a),this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)}});export{Line3};