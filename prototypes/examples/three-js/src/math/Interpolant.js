function Interpolant(a,b,c,d){this.parameterPositions=a,this._cachedIndex=0,this.resultBuffer=d===void 0?new b.constructor(c):d,this.sampleValues=b,this.valueSize=c}Object.assign(Interpolant.prototype,{evaluate:function(a){var b=this.parameterPositions,c=this._cachedIndex,d=b[c],e=b[c-1];validate_interval:{seek:{var f;linear_scan:{forward_scan:if(!(a<d)){for(var g=c+2;;){if(void 0===d){if(a<e)break forward_scan;return c=b.length,this._cachedIndex=c,this.afterEnd_(c-1,a,e)}if(c===g)break;if(e=d,d=b[++c],a<d)break seek}f=b.length;break linear_scan}if(!(a>=e)){var h=b[1];a<h&&(c=2,e=h);for(var g=c-2;;){if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(c===g)break;if(d=e,e=b[--c-1],a>=e)break seek}f=c,c=0;break linear_scan}break validate_interval}for(;c<f;){var i=c+f>>>1;a<b[i]?f=i:c=i+1}if(d=b[c],e=b[c-1],void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(void 0===d)return c=b.length,this._cachedIndex=c,this.afterEnd_(c-1,e,a)}this._cachedIndex=c,this.intervalChanged_(c,e,d)}return this.interpolate_(c,e,a,d)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(a){for(var b=this.resultBuffer,c=this.sampleValues,d=this.valueSize,e=0;e!==d;++e)b[e]=c[a*d+e];return b},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),Object.assign(Interpolant.prototype,{beforeStart_:Interpolant.prototype.copySampleValue_,afterEnd_:Interpolant.prototype.copySampleValue_});export{Interpolant};