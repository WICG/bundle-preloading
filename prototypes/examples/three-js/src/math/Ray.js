import{Vector3}from'./Vector3.js';function Ray(a,b){this.origin=a===void 0?new Vector3:a,this.direction=b===void 0?new Vector3:b}Object.assign(Ray.prototype,{set:function(a,b){return this.origin.copy(a),this.direction.copy(b),this},clone:function(){return new this.constructor().copy(this)},copy:function(a){return this.origin.copy(a.origin),this.direction.copy(a.direction),this},at:function(a,b){var c=b||new Vector3;return c.copy(this.direction).multiplyScalar(a).add(this.origin)},lookAt:function(a){return this.direction.copy(a).sub(this.origin).normalize(),this},recast:function(){var a=new Vector3;return function(b){return this.origin.copy(this.at(b,a)),this}}(),closestPointToPoint:function(a,b){var c=b||new Vector3;c.subVectors(a,this.origin);var d=c.dot(this.direction);return 0>d?c.copy(this.origin):c.copy(this.direction).multiplyScalar(d).add(this.origin)},distanceToPoint:function(a){return Math.sqrt(this.distanceSqToPoint(a))},distanceSqToPoint:function(){var a=new Vector3;return function(b){var c=a.subVectors(b,this.origin).dot(this.direction);return 0>c?this.origin.distanceToSquared(b):(a.copy(this.direction).multiplyScalar(c).add(this.origin),a.distanceToSquared(b))}}(),distanceSqToSegment:function(){var a=new Vector3,b=new Vector3,d=new Vector3;return function(e,f,g,h){var i=Math.min,j=Math.max;a.copy(e).add(f).multiplyScalar(0.5),b.copy(f).sub(e).normalize(),d.copy(this.origin).sub(a);var k,l,m,n,o=0.5*e.distanceTo(f),p=-this.direction.dot(b),q=d.dot(this.direction),r=-d.dot(b),s=d.lengthSq(),c=Math.abs(1-p*p);if(!(0<c))l=0<p?-o:o,k=j(0,-(p*l+q)),m=-k*k+l*(l+2*r)+s;else if(k=p*r-q,l=p*q-r,n=o*c,!(0<=k))l<=-n?(k=j(0,-(-p*o+q)),l=0<k?-o:i(j(-o,-r),o),m=-k*k+l*(l+2*r)+s):l<=n?(k=0,l=i(j(-o,-r),o),m=l*(l+2*r)+s):(k=j(0,-(p*o+q)),l=0<k?o:i(j(-o,-r),o),m=-k*k+l*(l+2*r)+s);else if(!(l>=-n))l=-o,k=j(0,-(p*l+q)),m=-k*k+l*(l+2*r)+s;else if(l<=n){var t=1/c;k*=t,l*=t,m=k*(k+p*l+2*q)+l*(p*k+l+2*r)+s}else l=o,k=j(0,-(p*l+q)),m=-k*k+l*(l+2*r)+s;return g&&g.copy(this.direction).multiplyScalar(k).add(this.origin),h&&h.copy(b).multiplyScalar(l).add(a),m}}(),intersectSphere:function(){var a=new Vector3;return function(b,c){a.subVectors(b.center,this.origin);var d=a.dot(this.direction),e=a.dot(a)-d*d,f=b.radius*b.radius;if(e>f)return null;var g=Math.sqrt(f-e),h=d-g,i=d+g;return 0>h&&0>i?null:0>h?this.at(i,c):this.at(h,c)}}(),intersectsSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0===b)return 0===a.distanceToPoint(this.origin)?0:null;var c=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=c?c:null},intersectPlane:function(a,b){var c=this.distanceToPlane(a);return null===c?null:this.at(c,b)},intersectsPlane:function(a){var b=a.distanceToPoint(this.origin);if(0===b)return!0;var c=a.normal.dot(this.direction);return!!(0>c*b)},intersectBox:function(a,b){var c,d,e,f,g,h,i=1/this.direction.x,j=1/this.direction.y,k=1/this.direction.z,l=this.origin;return(0<=i?(c=(a.min.x-l.x)*i,d=(a.max.x-l.x)*i):(c=(a.max.x-l.x)*i,d=(a.min.x-l.x)*i),0<=j?(e=(a.min.y-l.y)*j,f=(a.max.y-l.y)*j):(e=(a.max.y-l.y)*j,f=(a.min.y-l.y)*j),c>f||e>d)?null:((e>c||c!==c)&&(c=e),(f<d||d!==d)&&(d=f),0<=k?(g=(a.min.z-l.z)*k,h=(a.max.z-l.z)*k):(g=(a.max.z-l.z)*k,h=(a.min.z-l.z)*k),c>h||g>d)?null:((g>c||c!==c)&&(c=g),(h<d||d!==d)&&(d=h),0>d?null:this.at(0<=c?c:d,b))},intersectsBox:function(){var a=new Vector3;return function(b){return null!==this.intersectBox(b,a)}}(),intersectTriangle:function(){var d=new Vector3,e=new Vector3,f=new Vector3,g=new Vector3;return function(h,a,b,c,i){e.subVectors(a,h),f.subVectors(b,h),g.crossVectors(e,f);var j,k=this.direction.dot(g);if(0<k){if(c)return null;j=1}else if(0>k)j=-1,k=-k;else return null;d.subVectors(this.origin,h);var l=j*this.direction.dot(f.crossVectors(d,f));if(0>l)return null;var m=j*this.direction.dot(e.cross(d));if(0>m)return null;if(l+m>k)return null;var n=-j*d.dot(g);return 0>n?null:this.at(n/k,i)}}(),applyMatrix4:function(a){return this.direction.add(this.origin).applyMatrix4(a),this.origin.applyMatrix4(a),this.direction.sub(this.origin),this.direction.normalize(),this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)}});export{Ray};